@inject IAdminService AdminService

@if (Alert != string.Empty)
{
	<div class="d-flex">
		<div class="alert alert-danger alert-dismissible fade show" role="alert">
			<strong>@Alert</strong>
			<button type="button" @onclick="CloseAlert" class="btn-close" data-bs-dismiss="alert" aria-label="close"></button>
		</div>
	</div>
}

@if (Navigation == PageType.Create)
{
	<ChangeFilm Page="@Navigation" OnChange="OnChange"></ChangeFilm>
}

@if (Navigation == PageType.Delete || Navigation == PageType.Edit)
{
	<ChangeFilm Page="@Navigation" OnChange="OnChange" Model="Film"></ChangeFilm>
}

<div class="d-flex m-1">
	<a href="/" class="btn btn-outline-secondary rounded-0 me-1">Home</a>
	<button type="button" class="btn btn-outline-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
	<button type="button" class="btn btn-outline-primary rounded-0" @onclick="()=>ChangePageType(PageType.Create)">Create</button>	
</div>

<FilmsIndex OnClick="OnClick" Model="Model"></FilmsIndex>

@code {
	List<FilmDTO> Model { get; set; } = new();
	public string Alert = string.Empty;
	public string Navigation = string.Empty;
	public FilmDTO Film { get; set; } = new();

	void ChangePageType(string pageType) => Navigation = pageType;
	void CloseAlert() => Alert = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Alert = string.Empty;
		Model = await AdminService.GetAsync<FilmDTO>("films/");
	}

	async Task OnClick(ClickModel model)
	{
		if (model.PageType.Equals(PageType.Edit) || model.PageType.Equals(PageType.Delete))
			Film = await AdminService.SingleAsync<FilmDTO>($"films/{model.Id}") ?? new();

		ChangePageType(model.PageType);
	}

	async Task OnChange(string alert)
	{
		try
		{
			Alert = alert;
			Model = await AdminService.GetAsync<FilmDTO>("films");
			ChangePageType(PageType.Index);
		}
		catch (Exception)
		{

			Alert = "Could not create/edit/delete the film.";
		}
	}
}
